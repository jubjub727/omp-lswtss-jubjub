0x0       int AddRef()
0x8       int Release()
0x10      int ShutDownAndRelease()
0x18      int SetEngineProperty(asEEngineProp property, asPWORD value)
0x20      asPWORD GetEngineProperty(asEEngineProp property)
0x28      int SetMessageCallback(const asSFuncPtr &callback, void *obj, asDWORD callConv)
0x30      int ClearMessageCallback()
0x38      int WriteMessage(const char *section, int row, int col, asEMsgType type, const char *message)
0x40      int SetJITCompiler(asIJITCompiler *compiler)
0x48      asIJITCompiler *GetJITCompiler()
0x50      int RegisterGlobalFunction(const char *declaration, const asSFuncPtr &funcPointer, asDWORD callConv, void *auxiliary = 0)
0x58      asUINT GetGlobalFunctionCount()
0x60      asIScriptFunction *GetGlobalFunctionByIndex(asUINT index)
0x68      asIScriptFunction *GetGlobalFunctionByDecl(const char *declaration)
0x70      int RegisterGlobalProperty(const char *declaration, void *pointer)
0x78      asUINT GetGlobalPropertyCount()
0x80      int GetGlobalPropertyByIndex(asUINT index, const char **name, const char **nameSpace = 0, int *typeId = 0, bool *isConst = 0, const char **configGroup = 0, void **pointer = 0, asDWORD *accessMask = 0)
0x88      int GetGlobalPropertyIndexByName(const char *name)
0x90      int GetGlobalPropertyIndexByDecl(const char *decl)
0x98      int RegisterObjectType(const char *obj, int byteSize, asDWORD flags)
0xa0      int RegisterObjectProperty(const char *obj, const char *declaration, int byteOffset, int compositeOffset = 0, bool isCompositeIndirect = false)
0xa8      int RegisterObjectMethod(const char *obj, const char *declaration, const asSFuncPtr &funcPointer, asDWORD callConv, void *auxiliary = 0, int compositeOffset = 0, bool isCompositeIndirect = false)
0xb0      int RegisterObjectBehaviour(const char *obj, asEBehaviours behaviour, const char *declaration, const asSFuncPtr &funcPointer, asDWORD callConv, void *auxiliary = 0, int compositeOffset = 0, bool isCompositeIndirect = false)
0xb8      int RegisterInterface(const char *name)
0xc0      int RegisterInterfaceMethod(const char *intf, const char *declaration)
0xc8      asUINT GetObjectTypeCount()
0xd0      asITypeInfo *GetObjectTypeByIndex(asUINT index)
0xd8      <Unknown function similar to RegisterObjectMethod>
0xe0      <Unknown function>
0xe8      int RegisterStringFactory(const char *datatype, asIStringFactory *factory)
0xf0      int GetStringFactoryReturnTypeId(asDWORD *flags = 0)
0xf8      int RegisterDefaultArrayType(const char *type)
0x100     int GetDefaultArrayTypeId()
0x108     int RegisterEnum(const char *type)
0x110     int RegisterEnumValue(const char *type, const char *name, int value)
0x118     asUINT GetEnumCount()
0x120     asITypeInfo *GetEnumByIndex(asUINT index)
0x128     int RegisterFuncdef(const char *decl)
0x130     asUINT GetFuncdefCount()
0x138     asITypeInfo *GetFuncdefByIndex(asUINT index)
0x140     int RegisterTypedef(const char *type, const char *decl)
0x148     asUINT GetTypedefCount()
0x150     asITypeInfo *GetTypedefByIndex(asUINT index)
0x158     int BeginConfigGroup(const char *groupName)
0x160     int EndConfigGroup()
0x168     int RemoveConfigGroup(const char *groupName)
0x170     asDWORD SetDefaultAccessMask(asDWORD defaultMask)
0x178     int SetDefaultNamespace(const char *nameSpace)
0x180     const char *GetDefaultNamespace()
0x188     asIScriptModule *GetModule(const char *module, asEGMFlags flag = asGM_ONLY_IF_EXISTS)
0x190     int DiscardModule(const char *module)
0x198     asUINT GetModuleCount()
0x1a0     asIScriptModule *GetModuleByIndex(asUINT index)
0x1a8     asIScriptFunction *GetFunctionById(int funcId)
0x1b0     int GetTypeIdByDecl(const char *decl)
0x1b8     const char *GetTypeDeclaration(int typeId, bool includeNamespace = false)
0x1c0     int GetSizeOfPrimitiveType(int typeId)
0x1c8     asITypeInfo *GetTypeInfoById(int typeId)
0x1d0     asITypeInfo *GetTypeInfoByName(const char *name)
0x1d8     asITypeInfo *GetTypeInfoByDecl(const char *decl)
0x1e0     asIScriptContext *CreateContext()
0x1e8     void *CreateScriptObject(const asITypeInfo *type)
0x1f0     void *CreateScriptObjectCopy(void *obj, const asITypeInfo *type)
0x1f8     void *CreateUninitializedScriptObject(const asITypeInfo *type)
0x200     asIScriptFunction *CreateDelegate(asIScriptFunction *func, void *obj)
0x208     int AssignScriptObject(void *dstObj, void *srcObj, const asITypeInfo *type)
0x210     void ReleaseScriptObject(void *obj, const asITypeInfo *type)
0x218     void AddRefScriptObject(void *obj, const asITypeInfo *type)
0x220     int RefCastObject(void *obj, asITypeInfo *fromType, asITypeInfo *toType, void **newPtr, bool useOnlyImplicitCast = false)
0x228     asILockableSharedBool *GetWeakRefFlagOfScriptObject(void *obj, const asITypeInfo *type)
0x230     asIScriptContext *RequestContext()
0x238     void ReturnContext(asIScriptContext *ctx)
0x240     int SetContextCallbacks(asREQUESTCONTEXTFUNC_t requestCtx, asRETURNCONTEXTFUNC_t returnCtx, void *param = 0)
0x248     asETokenClass ParseToken(const char *string, size_t stringLength = 0, asUINT *tokenLength = 0)
0x250     int GarbageCollect(asDWORD flags = asGC_FULL_CYCLE, asUINT numIterations = 1)
0x258     void GetGCStatistics(asUINT *currentSize, asUINT *totalDestroyed = 0, asUINT *totalDetected = 0, asUINT *newObjects = 0, asUINT *totalNewDestroyed = 0)
0x260     int NotifyGarbageCollectorOfNewObject(void *obj, asITypeInfo *type)
0x268     int GetObjectInGC(asUINT idx, asUINT *seqNbr = 0, void **obj = 0, asITypeInfo **type = 0)
0x270     void GCEnumCallback(void *reference)
0x278     void ForwardGCEnumReferences(void *ref, asITypeInfo *type)
0x280     void ForwardGCReleaseReferences(void *ref, asITypeInfo *type)
0x288     void SetCircularRefDetectedCallback(asCIRCULARREFFUNC_t callback, void *param = 0)
0x290     void *SetUserData(void *data, asPWORD type = 0)
0x298     void *GetUserData(asPWORD type = 0)
0x2a0     void SetEngineUserDataCleanupCallback(asCLEANENGINEFUNC_t callback, asPWORD type = 0)
0x2a8     void SetModuleUserDataCleanupCallback(asCLEANMODULEFUNC_t callback, asPWORD type = 0)
0x2b0     void SetContextUserDataCleanupCallback(asCLEANCONTEXTFUNC_t callback, asPWORD type = 0)
0x2b8     void SetFunctionUserDataCleanupCallback(asCLEANFUNCTIONFUNC_t callback, asPWORD type = 0)
0x2c0     void SetTypeInfoUserDataCleanupCallback(asCLEANTYPEINFOFUNC_t callback, asPWORD type = 0)
0x2c8     void SetScriptObjectUserDataCleanupCallback(asCLEANSCRIPTOBJECTFUNC_t callback, asPWORD type = 0)
0x2d0     int SetTranslateAppExceptionCallback(asSFuncPtr callback, void *param, int callConv)
0x2d8     ~asIScriptEngine() {}